import Axios from 'axios';
import NavAdmin from '@/components/NavAdmin';
import AppointmentAction from '@/components/AppointmentAction';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import MenuUsers from '@/components/MenuUsers';
import { useRouter } from 'next/router';

export default function Agendamentos() {
  const API_URL = "http://localhost:8080/api/agendamentos/paciente";  // URL base para os agendamentos
  const router = useRouter();
  const { pid } = router.query;  // Pega o ID do profissional da URL

  const [agendamentos, setAgendamentos] = useState([]);
  const [pacientes, setPacientes] = useState([]);  // Estado para os pacientes
  const [pacienteFiltro, setPacienteFiltro] = useState('');  // Estado para o filtro de paciente
  const [erroSelecao, setErroSelecao] = useState(false);  // Estado para erro de filtro de paciente

  useEffect(() => {
    // Carregar a lista de pacientes para o filtro
    const getPacientes = async () => {
      try {
        const response = await Axios.get('http://localhost:8080/api/agendamentos/pacientes');  // API para obter a lista de pacientes
        setPacientes(response.data);
      } catch (error) {
        console.error('Erro ao buscar os pacientes:', error);
      }
    };

    getPacientes();
  }, []);

  useEffect(() => {
    // Verificar se um paciente foi selecionado
    if (pacienteFiltro && pid) {
      setErroSelecao(false); // Se paciente foi selecionado, limpa o erro

      // Consultar os agendamentos do paciente e profissional
      const getAllAgendamentos = async () => {
        try {
          const url = `${API_URL}/${pid}/${pacienteFiltro}`; // Constrói a URL com os dois parâmetros
          const response = await Axios.get(url);
          setAgendamentos(response.data);
          console.log(response.data);
        } catch (error) {
          console.error('Erro ao buscar os agendamentos:', error);
        }
      };

      getAllAgendamentos();
    }
  }, [pacienteFiltro, pid]);  // Executa sempre que o filtro de paciente ou o pid mudar

  const handleFiltroChange = (e) => {
    const pacienteId = e.target.value;
    setPacienteFiltro(pacienteId);

    // Se nenhum paciente for selecionado, exibe mensagem de erro
    if (!pacienteId) {
      setErroSelecao(true);
      setAgendamentos([]);  // Limpa os agendamentos caso nenhum paciente seja selecionado
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuUsers />
      </div>
  
      <div className="d-flex justify-content-center p-4" style={{ background: 'linear-gradient(45deg, #ffffff, #d4edda)', minHeight: '100vh' }}>
        <div className="container">
          <div className="row mb-4 pb-3" style={{ borderBottom: '1px solid #a0a0a0' }}>
            <h3 className="text-success">Lista de Agendamentos - Filtro por Paciente</h3>
          </div>

          <div className="d-flex justify-content-center mb-4">
            <Link className="nav-link" href={`/admin/agendamentos/index/${pid}`}>
              <button className="btn btn-success btn-lg p-3">Visualizar Agenda </button>
            </Link>
          </div>

          {/* Filtro de Paciente */}
          <div className="d-flex justify-content-center mb-4">
            <select 
              className="form-select"
              value={pacienteFiltro} 
              onChange={handleFiltroChange} 
              style={{ maxWidth: '250px' }}
            >
              <option value="">-- Selecione um Paciente --</option>
              {pacientes.map((paciente) => (
                <option key={paciente.idPacientes} value={paciente.idPacientes}>
                  {paciente.primeiroNome} {paciente.ultimoNome}
                </option>
              ))}
            </select>
          </div>

          {/* Mensagem de erro caso nenhum paciente tenha sido selecionado */}
          {erroSelecao && (
            <div className="text-center mb-4">
              <p className="text-danger"><strong>Por favor, selecione um paciente para visualizar os agendamentos.</strong></p>
            </div>
          )}

          {/* Exibição de agendamentos */}
          {agendamentos.length === 0 && !erroSelecao ? (
            <div className="text-center">
              <p className="text-danger"><strong>Não há agendamentos para o paciente selecionado.</strong></p>
            </div>
          ) : (
            <div className="row">
              {agendamentos.map(agendamento => {
                const dataFormatada = new Date(agendamento.dia).toLocaleDateString('pt-BR');

                return (
                  <div key={agendamento.idAgendamentos} className="col-md-4 mb-4" id={`agendamento-${agendamento.idAgendamentos}`}>
                    <div className="card shadow-lg border-success">
                      <div className="card-body">
                        <h5 className="card-title text-success">Agendamento de {agendamento.primPr} {agendamento.ultPr}</h5>
                        <p className="card-text"><strong>Paciente:</strong> {agendamento.primPac} {agendamento.ultPac}</p>
                        <p className="card-text"><strong>Data:</strong> {dataFormatada}</p>
                        <p className="card-text"><strong>Hora Início:</strong> {agendamento.horaInicio}</p>
                        <p className="card-text"><strong>Hora Fim:</strong> {agendamento.horaFim}</p>
                        <p className="card-text"><strong>Descrição:</strong> {agendamento.descricao}</p>
                        <div className="d-flex justify-content-end">
                          <AppointmentAction pid={agendamento.idAgendamentos} />
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </>
  );
}
