import NavAdmin from '@/components/NavAdmin'
import MenuUsers from '@/components/MenuUsers';
import Head from 'next/head'
import Link from 'next/link'
import { useEffect, useState } from 'react';
import Axios from 'axios';
import { useRouter } from 'next/router';

export default function DeleteUser() {
  
  const API_URL = "http://localhost:8080/api/users/id/";

  const [user, setUser] = useState({
    id: "",
    name: "",
    email: "",
    user: "",
    pwd: "",
    level: "",
    status: "",
    created_at: ""
  });

  const router = useRouter();
  const { pid } = router.query; // Usando query diretamente

  const [message, setMessage] = useState({ message: "", status: "" });
  const [isDeleted, setIsDeleted] = useState(false); // Controla se o usuário foi deletado

  const optionsLevel = [
    { value: '', text: '-- Selecione um nível de acesso --' },
    { value: 'admin', text: 'Administrador' },
    { value: 'user', text: 'Usuário' },
    { value: 'reader', text: 'Leitor' },
  ];

  const optionsStatus = [
    { value: '', text: '-- Selecione um estado --' },
    { value: 'true', text: 'Ativo' },
    { value: 'false', text: 'Inativo' },
  ];

  useEffect(() => {
    if (!pid) return;  // Evitar requisição se o pid não estiver disponível

    const getUser = async () => {
      try {
        const response = await Axios.get(API_URL + pid);
        console.log(response.data); // Certifique-se de que os dados são retornados corretamente
        setMessage({ message: "Estudante Encontrado com sucesso! ", status: "ok" });
        setUser(response.data); // Atualiza o estado com os dados do estudante
      } catch (error) {
        console.error('Erro ao buscar o estudante:', error);
        setMessage({ message: "Erro ao buscar o Estudante! ", status: "error" });
      }
    };

    getUser();

  }, [pid]);

  const handleDeleteUser = async () => {
    if (isDeleted) return; // Evita múltiplas deleções

    try {
      const response = await Axios.delete(API_URL + pid);
      setMessage({ message: "Estudante deletado com sucesso! ", status: "ok" });
      setIsDeleted(true); // Marca o usuário como deletado
    } catch (error) {
      console.error('Erro ao deletar o Usuário:', error);
      setMessage({ message: "Erro ao deletar o Usuário! ", status: "error" });
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuUsers />
        {
          message.status === "" ? "" :
            message.status === "ok" ? 
              <div className='alert alert-success' role='alert'>
                {message.message}
                <Link className='alert-link' href='/admin/students'>Voltar</Link>
              </div> : 
              <div className='alert alert-danger' role='alert'>
                {message.message}
                <Link className='alert-link' href='/admin/students'>Voltar</Link>
              </div>
        }
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3> Deletar Usuário </h3>
            
            <form>
              <div className="form-group">
                <label className="form-label" htmlFor="name">Nome</label>
                <input type="text" id="name" name="name" className="form-control" value={user.name} readOnly />
              </div>

              <div className="form-group">
                <label className="form-label" htmlFor="email">E-mail</label>
                <input type="text" id="email" name="email" className="form-control" value={user.email} readOnly />
              </div>

              <div className="form-group">
                <label className="form-label" htmlFor="username">Usuário</label>
                <input type="text" id="username" name="username" className="form-control" value={user.username} readOnly />
              </div>

              <div className="form-group">
                <label className="form-label" htmlFor="password">Senha</label>
                <input type="password" id="password" name="password" className="form-control" value={user.password} readOnly />
              </div>

              <div className="form-group">
                <label className="form-label" htmlFor="level">Nível</label>
                <select className="form-select" id="level" name="level" value={user.level} readOnly>
                  {optionsLevel.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.text}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label className="form-label" htmlFor="status">Status</label>
                <select className="form-select" id="status" name="status" value={user.status} readOnly>
                  {optionsStatus.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.text}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label className="form-label" htmlFor="created_at">Data de Criação</label>
                <input type="text" id="created_at" name="created_at" className="form-control" value={user.created_at} readOnly />
              </div>

              <div className="form-group p-2">
                <button 
                  className="btn btn-outline-danger" 
                  type="button" 
                  onClick={handleDeleteUser} 
                  disabled={isDeleted} // Desabilita o botão após deleção
                >
                  Deletar
                </button>
                <Link className="btn btn-outline-info" href="/admin/users">Voltar</Link>
              </div>
            </form>
          </div>
        </div>
      </div>  
    </>
  );
}
